name: Docker Publish

on:
  workflow_dispatch:
    inputs:
      REPO_URL:
        description: 'The URL of the repository to clone.'
        required: true
        type: string
      REPO_OVERRIDE_RELEASE_VERSION:
        description: 'Override the release version if needed.'
        required: false
        type: string
      REPO_OVERRIDE_DOCKERFILE_PATH:
        description: 'Path to the Dockerfile, defaults to ./Dockerfile.'
        required: false
        type: string
        default: './Dockerfile'
  workflow_call:
    secrets:
      token:
        required: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

      - name: Set env
        run: |
          REPO_URL="${{ github.event.inputs.REPO_URL }}"
          REPO_PREFIX=$(echo $REPO_URL | sed -E 's#(https?://[^/]+).*#\1#')
          REPO_NAME=$(echo $REPO_URL | sed -E 's#https?://[^/]+/##')
          FULL_REPO_SUMMARY_NAME="${REPO_PREFIX}_-_${REPO_NAME}"
          echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
          echo "FULL_REPO_SUMMARY_NAME=$FULL_REPO_SUMMARY_NAME" >> $GITHUB_ENV

      - name: Checkout external Git project
        run: |
          git clone ${{ env.REPO_URL }} external-repo
          cd external-repo
          if [ -z "${{ github.event.inputs.REPO_OVERRIDE_RELEASE_VERSION }}" ]; then
            LAST_RELEASE_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
            echo "RELEASE_VERSION=$LAST_RELEASE_TAG" >> $GITHUB_ENV
          else
            echo "RELEASE_VERSION=${{ github.event.inputs.REPO_OVERRIDE_RELEASE_VERSION }}" >> $GITHUB_ENV
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Check and create Docker Hub repository
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_TOKEN }}" "https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/${{ env.FULL_REPO_SUMMARY_NAME }}/")
          if [ "$RESPONSE" -eq 404 ]; then
            echo "Repository does not exist. Creating..."
            curl -s -X POST -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_TOKEN }}" "https://hub.docker.com/v2/repositories/" -d "{\"name\": \"${{ env.FULL_REPO_SUMMARY_NAME }}\", \"namespace\": \"${{ secrets.DOCKER_USERNAME }}\"}"
          else
            echo "Repository exists."
          fi

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./external-repo
          file: ${{ env.REPO_OVERRIDE_DOCKERFILE_PATH || './Dockerfile' }}
          platforms: linux/arm/v7,linux/arm64,linux/amd64
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.FULL_REPO_SUMMARY_NAME }}:${{ env.RELEASE_VERSION }}, ${{ secrets.DOCKER_USERNAME }}/${{ env.FULL_REPO_SUMMARY_NAME }}:latest

      - name: Image digest
        run: echo ${{ steps.build.outputs.digest }}
