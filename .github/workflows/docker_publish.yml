name: Docker Publish

on:
  workflow_dispatch:
    inputs:
      REPO_URL:
        description: 'The URL of the repository to clone.'
        required: true
        type: string
      REPO_OVERRIDE_RELEASE_VERSION:
        description: 'Override the release version if needed.'
        required: false
        type: string
      REPO_OVERRIDE_DOCKERFILE_PATH:
        description: 'Path to the Dockerfile, defaults to ./Dockerfile.'
        required: false
        type: string
        default: './Dockerfile'
  workflow_call:
    secrets:
      token:
        required: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

      - name: Set env
        run: |
          REPO_URL="${{ github.event.inputs.REPO_URL }}"
          REPO_PREFIX=$(echo $REPO_URL | sed -E 's#https?://[^/]+/([^/]+)/.*#\1#')
          REPO_NAME=$(echo $REPO_URL | sed -E 's#https?://[^/]+/([^/]+)/([^/]+)\.git#\2#')
          REPO_OVERRIDE_DOCKERFILE_PATH="${{ github.event.inputs.REPO_OVERRIDE_DOCKERFILE_PATH || './Dockerfile' }}"
          REPO_DOCKERFILE_CONTEXT=$(dirname "${REPO_OVERRIDE_DOCKERFILE_PATH}")
          echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
          echo "REPO_PREFIX=$REPO_PREFIX" >> $GITHUB_ENV
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "REPO_OVERRIDE_DOCKERFILE_PATH=$REPO_OVERRIDE_DOCKERFILE_PATH" >> $GITHUB_ENV
          echo "REPO_DOCKERFILE_CONTEXT=$REPO_DOCKERFILE_CONTEXT" >> $GITHUB_ENV

      - name: Checkout external Git project
        run: |
          git clone ${{ env.REPO_URL }} external-repo
          cd external-repo
          if [ -z "${{ github.event.inputs.REPO_OVERRIDE_RELEASE_VERSION }}" ]; then
            RELEASE_VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))
          else
            RELEASE_VERSION="${{ github.event.inputs.REPO_OVERRIDE_RELEASE_VERSION }}"
          fi
          echo "The release version is $RELEASE_VERSION"
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Check and create Docker Hub repository
        run: |
          DOCKER_HUB_REPO_URL="https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/${{ env.REPO_NAME }}"
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_TOKEN }}" "$DOCKER_HUB_REPO_URL")
          if [ "$RESPONSE" -eq 404 ]; then
            echo "Repository does not exist. Please create it manually here: https://hub.docker.com/repository/create and remember to put into description: ${REPO_URL}"
            exit 1
          else
            echo "Repository $DOCKER_HUB_REPO_URL exists. it can continue."
          fi

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.REPO_DOCKERFILE_CONTEXT }}
          file: ${{ env.REPO_OVERRIDE_DOCKERFILE_PATH }}
          platforms: linux/arm/v7,linux/arm64,linux/amd64
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.REPO_NAME }}:${{ env.RELEASE_VERSION }}, ${{ secrets.DOCKER_USERNAME }}/${{ env.REPO_NAME }}:latest

      - name: Image digest
        run: echo ${{ steps.build.outputs.digest }}
